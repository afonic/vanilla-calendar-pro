import type * as T from '@src/types';
import type VanillaCalendar from '@src/vanilla-calendar';
export default class OptionsCalendar {
    viewType: T.TypesCalendar;
    isInput: boolean;
    positionToInput: 'auto' | 'center' | 'left' | 'right' | ['bottom' | 'top', 'center' | 'left' | 'right'];
    firstWeekday: T.WeekDayID;
    monthsToSwitch: number;
    themeAttrDetect: string | false;
    locale: T.Locale;
    dateToday: Date;
    dateMin: T.FormatDateString | 'today';
    dateMax: T.FormatDateString | 'today';
    displayMonthsCount: T.MonthsCount;
    displayDateMin: T.FormatDateString | 'today';
    displayDateMax: T.FormatDateString | 'today';
    displayDatesOutside: boolean;
    displayDisabledDates: boolean;
    disableDates: Array<Date | number | string>;
    disableAllDates: boolean;
    disableDatesPast: boolean;
    disableDatesGaps: boolean;
    disableWeekdays: number[];
    disableToday: boolean;
    enableDates: Array<Date | number | string>;
    enableEdgeDatesOnly: boolean;
    enableDateToggle: T.ToggleSelected;
    enableWeekNumbers: boolean;
    enableMonthChangeOnDayClick: boolean;
    enableJumpToSelectedDate: boolean;
    selectionDatesMode: false | 'single' | 'multiple' | 'multiple-ranged';
    selectionMonthsMode: boolean | 'only-arrows';
    selectionYearsMode: boolean | 'only-arrows';
    selectionTimeMode: false | 12 | 24;
    selectedDates: Array<Date | number | string>;
    selectedMonth: number;
    selectedYear: number;
    selectedHolidays: Array<Date | number | string>;
    selectedWeekends: T.WeekDays<T.WeekDayID>;
    selectedTime: string;
    selectedTheme: 'light' | 'dark' | 'system' | string;
    timeMinHour: T.Range<24>;
    timeMaxHour: T.Range<24>;
    timeMinMinute: T.Range<60>;
    timeMaxMinute: T.Range<60>;
    timeControls: 'all' | 'range';
    timeStepHour: number;
    timeStepMinute: number;
    sanitizerHTML: (dirtyHtml: string) => string;
    onClickDate: (e: MouseEvent, self: VanillaCalendar) => void;
    onClickWeekDay: (e: MouseEvent, day: number, days: HTMLElement[], self: VanillaCalendar) => void;
    onClickWeekNumber: (e: MouseEvent, number: number, days: HTMLElement[], year: number, self: VanillaCalendar) => void;
    onClickTitle: (e: MouseEvent, self: VanillaCalendar) => void;
    onClickMonth: (e: MouseEvent, self: VanillaCalendar) => void;
    onClickYear: (e: MouseEvent, self: VanillaCalendar) => void;
    onClickArrow: (e: MouseEvent, self: VanillaCalendar) => void;
    onChangeTime: (e: Event, self: VanillaCalendar, isError: boolean) => void;
    onChangeToInput: (e: Event, self: VanillaCalendar) => void;
    onInit: (self: VanillaCalendar) => void;
    onUpdate: (self: VanillaCalendar) => void;
    onDestroy: (self: VanillaCalendar) => void;
    onShow: (self: VanillaCalendar) => void;
    onHide: (self: VanillaCalendar) => void;
    popups: T.Popups;
    labels: T.Labels;
    layouts: T.Layouts;
    styles: T.Styles;
}
